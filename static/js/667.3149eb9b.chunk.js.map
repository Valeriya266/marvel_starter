{"version":3,"file":"static/js/667.3149eb9b.chunk.js","mappings":"sLAEA,MAMA,EANqBA,KAEbC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAAQC,UAAW,UAAWC,OAAQ,UAAWC,IAAKC,EAAKC,IAAI,S,6JCK/H,MAiDMC,EAAOC,IAAa,IAAZ,KAACC,GAAKD,EAChB,MAAM,KAACE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,GAAQL,EACvD,IAAIM,EAAW,CAAC,UAAc,SAK9B,MAJkB,wEAAdH,IACAG,EAAW,CAAC,UAAc,aAI1BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9BrB,EAAAA,EAAAA,KAAA,OAAKO,IAAKQ,EAAWN,IAAI,mBAAmBW,UAAU,kBAAkBnB,MAAOiB,KAC/EC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BrB,EAAAA,EAAAA,KAAA,KAAGoB,UAAU,mBAAkBC,SAAER,KACjCb,EAAAA,EAAAA,KAAA,KAAGoB,UAAU,oBAAmBC,SAC3BP,KAELK,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BrB,EAAAA,EAAAA,KAAA,KAAGsB,KAAMN,EAAUI,UAAU,sBAAqBC,UAC9CrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,gBAE3BrB,EAAAA,EAAAA,KAAA,KAAGsB,KAAML,EAAMG,UAAU,2BAA0BC,UAC/CrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,mBAIjC,EAId,EA7EmBE,KAEf,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAE3B,aAACC,EAAY,WAAEC,EAAU,QAAEC,EAAO,WAAEC,IAAcC,EAAAA,EAAAA,MAExDC,EAAAA,EAAAA,YAAU,KACNC,IACA,MAAMC,EAAUC,YAAYF,IAAc,KAE1C,MAAO,KACHG,cAAcF,EAAQ,CACzB,GACF,IAEH,MAAMG,EAAgBb,IAClBC,EAAQD,EAAK,EAGXS,EAAaA,KACfL,IACA,MAAMU,EAAKC,KAAKC,MAAmB,IAAbD,KAAKE,UAAkC,OAE7Dd,EAAaW,GACRI,KAAKL,GACLK,MAAK,IAAMZ,EAAW,cAAa,EAG5C,OACIX,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EAClBsB,EAAAA,EAAAA,GAAWd,EAASnB,EAAMc,IAC/BL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,oBAAmBC,SAAA,CAAC,+BACFrB,EAAAA,EAAAA,KAAA,SAAK,6CAGpCA,EAAAA,EAAAA,KAAA,KAAGoB,UAAU,oBAAmBC,SAAC,2BAGjCrB,EAAAA,EAAAA,KAAA,UAAQ4C,QAASX,EAAYb,UAAU,sBAAqBC,UACxDrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,cAE3BrB,EAAAA,EAAAA,KAAA,OAAKO,IAAKsC,EAASpC,IAAI,UAAUW,UAAU,gCAE7C,E,wCC5Cd,MAAMuB,EAAaA,CAACd,EAASiB,EAAWC,KACpC,OAAQlB,GACJ,IAAK,UACD,OAAO7B,EAAAA,EAAAA,KAACgD,EAAAA,EAAO,IAEnB,IAAK,UACD,OAAOD,GAAiB/C,EAAAA,EAAAA,KAAC8C,EAAS,KAAK9C,EAAAA,EAAAA,KAACgD,EAAAA,EAAO,IAEnD,IAAK,YACD,OAAOhD,EAAAA,EAAAA,KAAC8C,EAAS,IAErB,IAAK,QACD,OAAO9C,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAExB,QACI,MAAM,IAAIkD,MAAM,4BACxB,EAkGJ,EA/FkBC,IAEd,MAAOC,EAAUC,IAAe1B,EAAAA,EAAAA,UAAS,KAClCqB,EAAgBM,IAAqB3B,EAAAA,EAAAA,WAAS,IAC9C4B,EAAQC,IAAa7B,EAAAA,EAAAA,UAAS,MAC9B8B,EAAWC,IAAgB/B,EAAAA,EAAAA,WAAS,IAErC,iBAACgC,EAAgB,QAAE7B,EAAO,WAAEC,IAAcC,EAAAA,EAAAA,MAEhDC,EAAAA,EAAAA,YAAU,KACN2B,EAAUL,GAAQ,EAAK,GACxB,IAGH,MAAMK,EAAYA,CAACL,EAAQM,KACbP,GAAVO,GACAF,EAAiBJ,GACZZ,KAAKmB,GACLnB,MAAK,IAAMZ,EAAW,cAAa,EAGtC+B,EAAoBC,IACtB,IAAIC,GAAQ,EACTD,EAAYE,OAAS,IACpBD,GAAQ,GAGZX,GAAYD,GAAY,IAAIA,KAAaW,KACzCT,GAAkBN,IAAkB,IACpCQ,GAAUD,GAAUA,EAAS,IAC7BG,GAAaD,GAAaO,GAAM,EAG9BE,GAAWC,EAAAA,EAAAA,QAAO,IAElBC,EAAe7B,IACjB2B,EAASG,QAAQC,SAAQC,GAAQA,EAAKC,UAAUC,OAAO,yBACvDP,EAASG,QAAQ9B,GAAIiC,UAAUE,IAAI,uBACnCR,EAASG,QAAQ9B,GAAIoC,OAAO,EA0C5B,OACIvD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBsB,EAAWd,GAAS,IAzCjC,SAAqB8C,GACjB,MAAMC,EAASD,EAAIE,KAAI,CAACP,EAAMQ,KAC1B,IAAI5D,EAAW,CAAC,UAAc,SAK9B,MAJuB,wEAAnBoD,EAAKvD,YACLG,EAAW,CAAC,UAAc,WAI1BlB,EAAAA,EAAAA,KAAC+E,EAAAA,EAAa,CAAeC,QAAS,IAAKC,WAAW,aAAY5D,UAC9DF,EAAAA,EAAAA,MAAA,MACIC,UAAU,aACV8D,SAAU,EACVC,IAAKC,GAAMnB,EAASG,QAAQU,GAAKM,EACjCxC,QAASA,KACLM,EAAMmC,eAAef,EAAKhC,IAC1B6B,EAAYW,EAAE,EAElBQ,WAAaC,IACK,MAAVA,EAAEC,KAAyB,UAAVD,EAAEC,MACnBtC,EAAMmC,eAAef,EAAKhC,IAC1B6B,EAAYW,GAChB,EACFzD,SAAA,EACErB,EAAAA,EAAAA,KAAA,OAAKO,IAAK+D,EAAKvD,UAAWN,IAAK6D,EAAKzD,KAAMZ,MAAOiB,KACjDlB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,aAAYC,SAAEiD,EAAKzD,WAhB1ByD,EAAKhC,GAkBT,IAIxB,OACItC,EAAAA,EAAAA,KAAA,MAAIoB,UAAU,aAAYC,UACtBrB,EAAAA,EAAAA,KAACyF,EAAAA,EAAe,CAACC,UAAW,KAAKrE,SAC5BuD,KAIjB,CAIuCe,CAAYxC,IAAWJ,IAClD/C,EAAAA,EAAAA,KAAA,UACIoB,UAAU,mCACVwE,SAAU7C,EACV9C,MAAO,CAAC,QAAWuD,EAAY,OAAS,SACxCZ,QAASA,IAAMe,EAAUL,GAAQjC,UACjCrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,kBAEzB,EC7EZX,EAAOC,IAAa,IAAZ,KAACC,GAAKD,EAChB,MAAM,KAACE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,EAAI,OAAE4E,GAAUjF,EAC/D,IAAIM,EAAW,CAAC,UAAc,SAK9B,MAJkB,wEAAdH,IACAG,EAAW,CAAC,UAAc,aAI1BC,EAAAA,EAAAA,MAAA2E,EAAAA,SAAA,CAAAzE,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBrB,EAAAA,EAAAA,KAAA,OAAKO,IAAKQ,EAAWN,IAAKI,EAAMZ,MAAOiB,KACnCC,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,kBAAiBC,SAAER,KAClCM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBrB,EAAAA,EAAAA,KAAA,KAAGsB,KAAMN,EAAUI,UAAU,sBAAqBC,UAC9CrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,gBAE3BrB,EAAAA,EAAAA,KAAA,KAAGsB,KAAML,EAAMG,UAAU,2BAA0BC,UAC/CrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,qBAK3CrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,cAAaC,SACvBP,KAELd,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,eAAcC,SAAC,aAC9BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,oBAAmBC,SAAA,CAC5BwE,EAAO7B,OAAS,EAAI,KAAO,qCAExB6B,EAAOhB,KAAI,CAACP,EAAMQ,KAEd,KAAIA,EAAI,GACR,OACI9E,EAAAA,EAAAA,KAAA,MAAYoB,UAAU,oBAAmBC,SACpCiD,EAAKzD,MADDiE,EAEJ,SAMtB,EAQX,EAnFkB5B,IAEd,MAAO1B,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAE3B,aAACC,EAAY,WAAEC,EAAU,QAAEC,EAAO,WAAEC,IAAcC,EAAAA,EAAAA,MAExDC,EAAAA,EAAAA,YAAU,KACNC,GAAY,GACb,CAACiB,EAAM6C,SAEV,MAAM9D,EAAaA,KACf,MAAM,OAAC8D,GAAU7C,EACZ6C,IAILnE,IACAD,EAAaoE,GACRrD,KAAKL,GACLK,MAAK,IAAMZ,EAAW,eAAa,EAGtCO,EAAgBb,IAClBC,EAAQD,EAAK,EAGb,OACIxB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,aAAYC,UACtBsB,EAAAA,EAAAA,GAAWd,EAASnB,EAAMc,IACzB,EClClB,MAAMwE,UAAsBlD,EAAAA,UAAUmD,WAAAA,GAAA,SAAAC,WAAA,KAClCC,MAAQ,CACJC,OAAO,EACV,CAEDC,iBAAAA,CAAkBD,EAAOE,GAErBC,KAAKC,SAAS,CACVJ,OAAO,GAEf,CAEAK,MAAAA,GACI,OAAGF,KAAKJ,MAAMC,OACHpG,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAGjBwG,KAAKrD,MAAM7B,QAEtB,EAGJ,U,oFCdA,MAkEA,EAlEuBqF,KACnB,MAAOlF,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC3B,mBAACiF,EAAkB,WAAE/E,EAAU,QAAEC,EAAO,WAAEC,IAAcC,EAAAA,EAAAA,KAExDM,EAAgBb,IAClBC,EAAQD,EAAK,EAWXoF,EAA2B,UAAZ/E,GAAsB7B,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,8BAA6BC,UAACrB,EAAAA,EAAAA,KAACD,EAAAA,EAAY,MAAY,KAC3G8G,EAAWrF,EAAcA,EAAKwC,OAAS,GAC7B7C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,CAAC,mBAAiBG,EAAK,GAAGX,KAAK,aACpEb,EAAAA,EAAAA,KAAC8G,EAAAA,GAAI,CAACC,GAAE,eAAAC,OAAiBxF,EAAK,GAAGc,IAAMlB,UAAU,2BAA0BC,UACvErB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,kBAG/BrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,qBAAoBC,SAAC,8DAP5B,KAWxB,OACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9BrB,EAAAA,EAAAA,KAACiH,EAAAA,GAAM,CACHC,cAAiB,CACbC,SAAU,IAEdC,iBAAoBC,EAAAA,GAAW,CAC3BF,SAAUE,EAAAA,KAAaC,SAAS,2BAEpCC,SAAa5G,IAAiB,IAAhB,SAACwG,GAASxG,EA7BhBE,QA8BOsG,EA7BvBvF,IAEA+E,EAAmB9F,GACd6B,KAAKL,GACLK,MAAK,IAAMZ,EAAW,cAyBK,EACtBT,UAEFF,EAAAA,EAAAA,MAACqG,EAAAA,GAAI,CAAAnG,SAAA,EACDrB,EAAAA,EAAAA,KAAA,SAAOoB,UAAU,qBAAqBqG,QAAQ,WAAUpG,SAAC,kCACzDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCrB,EAAAA,EAAAA,KAAC0H,EAAAA,GAAK,CACFpF,GAAG,WACHzB,KAAK,WACL8G,KAAK,OACLC,YAAY,gBAChB5H,EAAAA,EAAAA,KAAA,UACI2H,KAAK,SACLvG,UAAU,sBACVwE,SAAsB,YAAZ/D,EAAsBR,UAChCrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,eAGnCrB,EAAAA,EAAAA,KAAC6H,EAAAA,GAAkB,CAACnC,UAAU,MAAMtE,UAAU,qBAAqBP,KAAK,kBAG3EgG,EACAD,IACC,ECvBd,EAtCiBkB,KACb,MAAOC,EAActG,IAAWC,EAAAA,EAAAA,UAAS,MAOzC,OACIP,EAAAA,EAAAA,MAAA2E,EAAAA,SAAA,CAAAzE,SAAA,EACIF,EAAAA,EAAAA,MAAC6G,EAAAA,EAAM,CAAA3G,SAAA,EACHrB,EAAAA,EAAAA,KAAA,QACIa,KAAK,cACLoH,QAAQ,+BAEZjI,EAAAA,EAAAA,KAAA,SAAAqB,SAAO,kCAEXrB,EAAAA,EAAAA,KAACgG,EAAa,CAAA3E,UACVrB,EAAAA,EAAAA,KAACuB,EAAU,OAEfJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BrB,EAAAA,EAAAA,KAACgG,EAAa,CAAA3E,UACVrB,EAAAA,EAAAA,KAACkI,EAAQ,CAAC7C,eAlBF/C,IACrBb,EAAQa,EAAG,OAmBFnB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIrB,EAAAA,EAAAA,KAACgG,EAAa,CAAA3E,UACVrB,EAAAA,EAAAA,KAACmI,EAAQ,CAACpC,OAAQgC,OAEtB/H,EAAAA,EAAAA,KAACgG,EAAa,CAAA3E,UACVrB,EAAAA,EAAAA,KAAC0G,EAAc,aAI3B1G,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,gBAAgBb,IAAK6H,EAAY3H,IAAI,aACrD,C,6CC3CJ,MC6EP,EA7EyBsB,KACrB,MAAM,QAACsG,EAAO,WAAEzG,EAAU,QAAEC,EAAO,WAAEC,GDDlBwG,MAEnB,MAAOzG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,WA0BvC,MAAO,CAAC2G,SAxBQE,EAAAA,EAAAA,cAAYC,eAAOC,GAAsF,IAAjFC,EAAMxC,UAAAlC,OAAA,QAAA2E,IAAAzC,UAAA,GAAAA,UAAA,GAAG,MAAO0C,EAAI1C,UAAAlC,OAAA,QAAA2E,IAAAzC,UAAA,GAAAA,UAAA,GAAG,KAAM2C,EAAO3C,UAAAlC,OAAA,QAAA2E,IAAAzC,UAAA,GAAAA,UAAA,GAAG,CAAC,eAAgB,oBAE5FpE,EAAW,WAEX,IACI,MAAMgH,QAAiBC,MAAMN,EAAK,CAACC,SAAQE,OAAMC,YAEjD,IAAKC,EAASE,GACV,MAAM,IAAI/F,MAAM,mBAAD+D,OAAoByB,EAAG,cAAAzB,OAAa8B,EAASG,SAKhE,aAFmBH,EAASI,MAGhC,CAAE,MAAM3D,GAEJ,MADAzD,EAAW,SACLyD,CACV,CACJ,GAAG,IAMc3D,YAJE2G,EAAAA,EAAAA,cAAY,KAC3BzG,EAAW,UAAU,GACtB,IAE0BD,UAASC,aAAW,EC3BEwG,GAE7Ca,EAAW,4CACXC,EAAU,0CA+BVC,EAAuB7H,IAClB,CACHc,GAAId,EAAKc,GACTzB,KAAMW,EAAKX,KACXC,YAAaU,EAAKV,YAAW,GAAAkG,OAChBxF,EAAKV,YAAYwI,MAAM,EAAG,KAAI,OACjC,6CACVvI,UAAWS,EAAKT,UAAUwI,KAAO,IAAM/H,EAAKT,UAAUyI,UACtDxI,SAAUQ,EAAKiI,KAAK,GAAGhB,IACvBxH,KAAMO,EAAKiI,KAAK,GAAGhB,IACnB5C,OAAQrE,EAAKqE,OAAOjB,QAItB8E,EAAoB7D,IAAY,IAAD8D,EACvC,MAAO,CACNrH,GAAIuD,EAAOvD,GACXsH,MAAO/D,EAAO+D,MACd9I,YAAa+E,EAAO/E,aAAe,0BACnC+I,UAAWhE,EAAOgE,UAAS,GAAA7C,OACrBnB,EAAOgE,UAAS,OACnB,2CACH9I,UAAW8E,EAAO9E,UAAUwI,KAAO,IAAM1D,EAAO9E,UAAUyI,UAC1DM,UAA+B,QAArBH,EAAA9D,EAAOkE,YAAY,UAAE,IAAAJ,OAAA,EAArBA,EAAuBG,WAAY,QAC7CE,MAAOnE,EAAOoE,OAAO,GAAGD,MAAK,GAAAhD,OACvBnB,EAAOoE,OAAO,GAAGD,MAAK,KACzB,gBACH,EAIC,MAAO,CACCnI,UACAC,aACA4B,iBA9DiB8E,iBAAiC,IAA1BlF,EAAM4C,UAAAlC,OAAA,QAAA2E,IAAAzC,UAAA,GAAAA,UAAA,GAFlB,IAIhB,aADkBmC,EAAQ,GAADrB,OAAImC,EAAQ,8BAAAnC,OAA6B1D,EAAM,KAAA0D,OAAIoC,KACjExI,KAAKiG,QAAQhC,IAAIwE,EAChC,EA4DQ1C,mBA1DmB6B,gBACLH,EAAO,GAAArB,OAAKmC,EAAQ,oBAAAnC,OAAmBnG,EAAI,KAAAmG,OAAIoC,KACtDxI,KAAKiG,QAAQhC,IAAIwE,GAyDxB1H,aArDa6G,UACjB,MAAM0B,QAAY7B,EAAO,GAAArB,OAAKmC,EAAQ,eAAAnC,OAAc1E,EAAE,KAAA0E,OAAIoC,IAC1D,OAAOC,EAAoBa,EAAItJ,KAAKiG,QAAQ,GAAG,EAoD3CsD,aAjDa3B,iBAAuB,IAAhBlF,EAAM4C,UAAAlC,OAAA,QAAA2E,IAAAzC,UAAA,GAAAA,UAAA,GAAG,EAIjC,aAHkBmC,EAAQ,GAADrB,OAClBmC,EAAQ,8CAAAnC,OAA6C1D,EAAM,KAAA0D,OAAIoC,KAE1DxI,KAAKiG,QAAQhC,IAAI6E,EACjC,EA6CQU,SA3CS5B,UACnB,MAAM0B,QAAY7B,EAAQ,GAADrB,OAAImC,EAAQ,WAAAnC,OAAU1E,EAAE,KAAA0E,OAAIoC,IACrD,OAAOM,EAAiBQ,EAAItJ,KAAKiG,QAAQ,GAAG,EA0ClCjF,aAAW,C,+DC1EvB,MAiBA,EAjBiByI,KAETlJ,EAAAA,EAAAA,MAAA2E,EAAAA,SAAA,CAAAzE,SAAA,EACIrB,EAAAA,EAAAA,KAAA,KAAGoB,UAAU,eAAcC,SAAC,kDAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,4BACfpB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,6BAEnBpB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,2BACfpB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,2BACfpB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,gCCU/B,EAnBmBuB,CAACd,EAASiB,EAAWlC,KACpC,OAAQiB,GACJ,IAAK,UACD,OAAO7B,EAAAA,EAAAA,KAACqK,EAAQ,IAEpB,IAAK,UACD,OAAOrK,EAAAA,EAAAA,KAACgD,EAAAA,EAAO,IAEnB,IAAK,YACD,OAAOhD,EAAAA,EAAAA,KAAC8C,EAAS,CAAClC,KAAMA,IAE5B,IAAK,QACD,OAAOZ,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAExB,QACI,MAAM,IAAIkD,MAAM,4BACxB,C","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\r\n\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar(), 60000);\r\n\r\n        return () => {\r\n            clearInterval(timerId);\r\n        } \r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\r\n        \r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))  \r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n                {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )    \r\n}\r\n\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting': \r\n            return <Spinner/>;\r\n            break;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component/>;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n             break;\r\n        default:\r\n            throw new Error('Unexpected process state');               \r\n    }\r\n}\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setnewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, []);\r\n\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed')) \r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if(newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setnewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items =  arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            \r\n            return (\r\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\r\n                    <li \r\n                        className=\"char__item\"\r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        onClick={() => {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i)\r\n                        }}\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                props.onCharSelected(item.id);\r\n                                focusOnItem(i);\r\n                            }\r\n                        }}>\r\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                            <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n        return (\r\n            <div className=\"char__list\">\r\n                {setContent(process, () => renderItems(charList), newItemLoading)}\r\n                <button \r\n                    className=\"button button__main button__long\"\r\n                    disabled={newItemLoading}\r\n                    style={{'display': charEnded ? 'none' : 'block'}}\r\n                    onClick={() => onRequest(offset)}>\r\n                    <div className=\"inner\">load more</div>\r\n                </button>\r\n            </div>\r\n        )\r\n}     \r\n\r\n\r\nexport default CharList;","import {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n    \r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId]);\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        clearError();    \r\n        getCharacter(charId)\r\n            .then(onCharLoaded) \r\n            .then(() => setProcess('confirmed'))  \r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n        return (\r\n            <div className=\"char__info\">\r\n                {setContent(process, View, char)}\r\n            </div>\r\n        )    \r\n    }\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                    <div>\r\n                        <div className=\"char__info-name\">{name}</div>\r\n                        <div className=\"char__btns\">\r\n                            <a href={homepage} className=\"button button__main\">\r\n                                <div className=\"inner\">homepage</div>\r\n                            </a>\r\n                            <a href={wiki} className=\"button button__secondary\">\r\n                                <div className=\"inner\">Wiki</div>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with this Hero!'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        // eslint-disable-next-line\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                        }     \r\n                    )\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react\"; \r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        //console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\nimport {Formik, Form, Field, ErrorMessage as FormikErrorMessage} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './CharSearchForm.scss';\r\n\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))  \r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is requred')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>   \r\n                <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" /> \r\n            </Form>\r\n        </Formik>\r\n            {results}\r\n            {errorMessage}   \r\n        </div>\r\n    )          \r\n}\r\n\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport {Helmet} from 'react-helmet';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n    \r\n    \r\n    const onCharSelected = (id) => {\r\n       setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary> \r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary> \r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() =>  {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=0db456f458ff601147a385f809ef5f2e';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request (`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request (`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n            );\r\n        return  res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description\r\n                    ? `${char.description.slice(0, 210)}...`\r\n                    : \"There is no description for this character\",\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n\r\n    return { \r\n            process, \r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacterByName, \r\n            getCharacter, \r\n            getAllComics, \r\n            getComic, \r\n            clearError};\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting': \r\n            return <Skeleton/>;\r\n            break;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n             break;\r\n        default:\r\n            throw new Error('Unexpected process state');               \r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","Component","newItemLoading","Spinner","Error","props","charList","setCharList","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","charId","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","this","setState","render","CharSearchForm","getCharacterByName","errorMessage","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}